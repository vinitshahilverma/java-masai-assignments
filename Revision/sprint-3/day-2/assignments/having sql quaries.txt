Problem 1 : Group data at the Sector level. Then find the average EPS for each sector and 
            assign the alias AvgEPSPerSector. Display sectors with AvgEPSPerSector above 10 
            and sort the result by the AvgEPSPerSector column in descending order.

Answer:- select sector,avg(eps) AvgEPSPerSector from Stock group by sector HAVING AvgEPSPerSector > 10 order by AvgEPSPerSector  desc;

Problem 2 : The following query is given:

SELECT
  job_id,
  AVG(salary) AS avg_salary
FROM
  employee
GROUP BY
  job_id
ORDER BY
  avg_salary DESC;

Modify this query to display those job_id values for which the average salary 
is greater than 10,000.

Answer:- select job_id,AVG(salary) AS avg_salary from employee group by job_id HAVING avg_salary>10000 ORDER by avg_salary desc;

Problem 3 : The following query is given:

SELECT
  job_id,
  AVG(salary) AS avg_salary
FROM
  employee
GROUP BY
  job_id
ORDER BY
  avg_salary DESC;

Modify this query to display those job_id values for which the average salary 
is in the range [10,000, 20,000].

Answer:- select job_id,AVG(salary) AS avg_salary from employee group by job_id HAVING avg_salary BETWEEN 10000 and 20000 ORDER by avg_salary desc;

Problem 4 : Group the data in the sale table at product_id level. Calculate the number of 
orders for each product and assign it to a column named number_of_orders. Then,
 using the HAVING clause, extract products with a number of orders greater than
 one. Sort the result in descending order by number_of_orders.

Answer:-select product_id,count(order_id) number_of_orders from sale GROUP by product_id HAVING number_of_orders>1 order by number_of_orders desc;

