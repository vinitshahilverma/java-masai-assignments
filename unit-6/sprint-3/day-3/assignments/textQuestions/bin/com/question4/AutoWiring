Q4/- What is auto wiring in Spring, how many types of Auto wiring are there in spring,
     explain with an example.
     
Answer:- Auto wiring:-

         Spring container on its own detects the dependencies implicitly and injecting them into the
         dependent bean is known as "auto-wiring".
         
         There are 4 types of Auto-Wiring:-
         
         1.No (Default).
         2.byName.
         3.byType.
         4.Constructor.
         
         byName:- 
         In this strategy , if a bean id attribute value in applicationContext.xml file matches with the variable/property
         name of a dependent bean, then spring container implicitly performs the setter injection into the dependent
         bean , it is known as auto-wire byName
         If the dependency is unmatched , container does not inject that dependency . its means property remains
         with null value,
         Example:-
         
                 <bean id="dao" class="com.masai.daoApp.DAOBean"/>
                 <bean id="service" class="com.masai.daoApp.ServiceBean" autowire="byName" />
                 <bean id="pb" class="com.masai.daoApp.PresentationBean" autowire="byName" />
                 
         byType:-
         In this strategy spring container will search for a bean class in spring configuration file, that matched with the
         property type.If matched then spring container injects that dependency obj by calling the setter method of
         dependent class.If unmatched then that property will remain with null value.
         
         ex:-
            <bean id="db" class="com.masai.daoApp.DAOBean"/>
            <bean id="sb" class="com.masai.daoApp.ServiceBean" autowire="byType" />
            <bean id="pb" class="com.masai.daoApp.PresentationBean" autowire="byType" />
            
        constructor auto-wiring:
        
        In this strategy , spring container uses constructor injection instead of setter injection.
        dependency resolution is done by using max number of argument constructor, if constructors are overloaded.
        Note:- it first uses byName and if not found then it uses byType , and in case byType is matched with
        more that 1 then ambiguity exception will occur.And if not matched ,here variable will not remain null, it will throw "UnsaticfiedDependencyException"
        This kind of auto-wiring is least preferred because of constructor ambiguity. and circular dependency
        
        Example:-
        
        A.java:
        --------
        package com.masai;
        public class A {
        public void funA() {
        System.out.println("inside funA of A");
        }
        }
           
        B.java:-
        ----------
        package com.masai;
        public class B {
        public void funB() {
        System.out.println("inside funB of B");
        }
        }
        
        Demo.java:
        ------------
        package com.masai;
        public class Demo {
        private A a1;
        private A a2;
        private B b1;
        
        public Demo() {
        System.out.println("inside zero argument constructor..");
        }
        
        public Demo(B b1, A a1) {
        this.b1=b1;
        this.a1=a1;
        System.out.println("inside 2 argument constructor..");
        }
        
        public Demo(B b1, A a1,A a2) {
        this.b1=b1;
        this.a1=a1;
        this.a2=a2;
        System.out.println("inside 3 argument constructor..");
        }
        
        public void showDetails() {
        System.out.println("inside showDetails....");
        System.out.println("b1 is :"+b1);
        System.out.println("a1 is :"+a1);
        System.out.println("a2 is :"+a2);
        }
        }
         